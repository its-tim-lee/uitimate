---
description: 
globs: 
alwaysApply: false
---
# Component

## Design
- All the components must have data-tag with the value to its `displayName` but in kebab case using lodash-es's kebabCase
- All the component's name in the file must be in upper camel case
- All the components' name must start with the same identifier (eg., In the heading component, there're: Heading, HeadingTitle, and HeadingSubtitle)
- All the family components must define `displayName` which literally just points to the name of the corresponding component
- All the components must be in arrow function

## Syntax
- Only React v19 syntax should be used (eg., do not usse `forwardRef`)

## Type
- Each component must declare type for its props
- When declaring any component type, prefer `ComponentProps` than `HTMLAttributes`
- A props type of a component must be named in the form of "ComponentNameProps" (eg., A component "Heading" has a props type "HeadingProps")
- All the types in the file should be aggregated in `namespace` under below pattern:
  ```
  namespace Type {
    export type ComponentName = ComponentNameProps;
    // ...
  }
  ```

# Comment
- All comments must have no grammar mistakes
- All comment must be clear, concise, and no redundancy

# Variant
- The name of a variant (declared via tailwind-variant) must be in lower camel case, and the ending of the name must be "Variants"


# Export
- There's only one `export` will be used in the file to export everything that should be exported
- All the components, variants, React contexts should be exported
- Among all the types in the file, only `namespace Type` will be exported


# Convention
- All the React APIs, including the type, should be used without via the namespace `React`
  > eg., instead of using `React.ComponentProps`, use `ComponentProps`
- The code placement follows below rules:
  - from the file bottom to top, it'd be: `export`, `namespace Type`, stacks of displayName
  - the type of component's props will be placed just right before the component
- [file-path-statement-guideline.mdc](mdc:‚ùî  root/‚ùî  root/‚ùî  root/‚ùî  root/.cursor/rules/file-path-statement-guideline.mdc)

# Examples
Below are files that strictly follow all rules above:
- [Heading.tsx](mdc:‚ùî  root/‚ùî  root/‚ùî  root/‚ùî  root/‚ùî  root/üå±  docs/app/components/ui/Heading/Heading.tsx)

# Draft Rules
Just ignore all below rules. Do not respect any of below in your thinking process.

- The folder structure: 
  - doc
  - mapper
  - ...
- In most of time, `asChild` should be supported in each component
- When any source code change, check whether there's anything (eg., comment, stories, doc, ...) needs to be updated as well:
  - all other files under the same folder (eg., doc, storybook)
  - all other files that use the source code
  If making the update is uncertain, warn me


  