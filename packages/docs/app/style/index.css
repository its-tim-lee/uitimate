@import 'tailwindcss' prefix(tw);
/**
 * This is literally for better code organization. But there's a concept worth to be mentioned:
 * Baiscally, it's about how Tailwind v4 deals with traditional style scoping (eg., CSS modules, or the local style provided by frameworks like Vue)
 * In fact, Tailwind does offer an API `@reference` to reference the global style to the local CSS,
 * and by doing so, you're be able to do whatever you like as you did in the global CSS without worrying about Tailwind get loaded more than once.
 *
 * But importing that local CSS into the local component can lead to performance issue (see https://bitl.to/4Emz),
 * and that's why we instead import them into the global.
 */
/* @import './components/ui/Sidebar/index.css'; */
/**
FIXME: currently, prefix with animation will not work. It has been fixed but hasn't released yet: https://github.com/tailwindlabs/tailwindcss/issues/16829
*/
@plugin 'tailwindcss-animate';
/* @import "tailwindcss-animated" prefix(tw); */
@custom-variant dark (&:where(.dark, .dark *));

/**
  The reason we link the vars defined under `@layer base` is simply because the current limitation of `@theme`,
  cuz we can't declare a class at here such as `.dark {...}`, otherwise we can simply do stuff like:
  ```
  .dark {
    --color-background: var(--tw-color-white);
  }
  ```
*/
@theme {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  /* FIXME: remove card styles */
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);

  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);

  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);

  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);

  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);

  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);

  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);

  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);

  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);
}

/*
  After upgraded to Tailwind v4, this is one of few styles provided by Tailwind as default:

  The default border color has changed to `currentColor` in v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--tw-color-gray-200, currentColor);
  }
}

/* FIXME:
  this maybe outdated (comes from the https://github.com/shadcn/app-tailwind-v4/blob/main/app/globals.css),
  cuz v4 can use `@utility` to define utilities (https://tailwindcss.com/docs/upgrade-guide#adding-custom-utilities).
*/
@layer utilities {
  /* FIXME:
    not sure why this (comes from the https://github.com/shadcn/app-tailwind-v4/blob/main/app/globals.css),
    cuz Shadcn offical uses `@apply font-sans antialiased bg-background text-foreground;` (https://ui.shadcn.com/docs/installation/manual)
  */
  body {
    font-family: Arial, Helvetica, sans-serif;
  }
}

/**
  Currently, all the Shadcn vars defined under :root and .dark are only meant to be used in the `@theme` block.
  So you don't really access these vars in other places.
*/
@layer base {
  /**
  Once the var is defined at here, it can be used literally anywhere,
  even in `@theme` which could be declared before this; this is because
  the var-resolving works at runtime.
  It doesn't matter where you define it, cuz it gets evaluated when the style is applied.
  eg.,
  For below declartion in `@theme`,
  ```
  --color-sidebar: hsl(var(--sidebar-background))
  ```
  `--sidebar-background` will only be resolved when browser is rendering `--color-sidebar`
  */
  :root {

    --card: var(--tw-color-white);
    --card-foreground: var(--tw-color-zinc-950);
    --popover: var(--tw-color-white);
    --popover-foreground: var(--tw-color-zinc-950);

    --background: var(--tw-color-white);
    --foreground: var(--tw-color-zinc-950);

    --primary: var(--tw-color-zinc-900);
    --primary-foreground: var(--tw-color-zinc-50);
    --secondary: var(--tw-color-zinc-100);
    --secondary-foreground: var(--tw-color-zinc-900);
    --muted: var(--tw-color-zinc-100);
    --muted-foreground: var(--tw-color-zinc-500);
    --accent: var(--tw-color-zinc-100);
    --accent-foreground: var(--tw-color-zinc-900);
    --destructive: var(--tw-color-red-500);
    --destructive-foreground: var(--tw-color-zinc-50);



    --border: var(--tw-color-zinc-200);
    --input: var(--tw-color-zinc-200);
    --ring: var(--tw-color-zinc-950);
    /**
     There's no corresponding color for these setup in Tailwind CSS v4
    */
    --chart-1: hsl(12 76% 61%);
    --chart-2: hsl(173 58% 39%);
    --chart-3: hsl(197 37% 24%);
    --chart-4: hsl(43 74% 66%);
    --chart-5: hsl(27 87% 67%);
    --radius: 0.5rem;
  }

  /* FIXME: should use complicated class name, not just .dark? */
  .dark {
    --background: var(--tw-color-zinc-950);
    --foreground: var(--tw-color-zinc-50);
    --card: var(--tw-color-zinc-950);
    --card-foreground: var(--tw-color-zinc-50);
    --popover: var(--tw-color-zinc-950);
    --popover-foreground: var(--tw-color-zinc-50);
    --primary: var(--tw-color-zinc-50);
    --primary-foreground: var(--tw-color-zinc-900);
    --secondary: var(--tw-color-zinc-800);
    --secondary-foreground: var(--tw-color-zinc-50);
    --muted: var(--tw-color-zinc-800);
    --muted-foreground: var(--tw-color-zinc-400);
    --accent: var(--tw-color-zinc-800);
    --accent-foreground: var(--tw-color-zinc-50);
    --destructive: var(--tw-color-red-900);
    --destructive-foreground: var(--tw-color-zinc-50);
    --border: var(--tw-color-zinc-800);
    --input: var(--tw-color-zinc-800);
    --ring: var(--tw-color-zinc-300);
    /**
     There's no corresponding color for these setup in Tailwind CSS v4
    */
    --chart-1: hsl(220 70% 50%);
    --chart-2: hsl(160 60% 45%);
    --chart-3: hsl(30 80% 55%);
    --chart-4: hsl(280 65% 60%);
    --chart-5: hsl(340 75% 55%);
  }

  * {
    @apply tw:border-border;
  }

  body {
    @apply tw:bg-background tw:text-foreground;
  }

  /* Below are all from Shadcn Doc Site source code */
  html {
    @apply tw:scroll-smooth;
  }
  body {
    @apply tw:overscroll-none;
    font-synthesis-weight: none;
    text-rendering: optimizeLegibility;
  }

}

@layer utilities {
  .border-grid {
    @apply tw:border-border/50 tw:dark:border-border tw:border-dashed;
  }

  .container-wrapper {
    @apply tw:max-w-[1400px] tw:min-[1800px]:max-w-screen-2xl tw:min-[1400px]:border-x tw:border-border/70 tw:dark:border-border tw:mx-auto tw:w-full tw:border-dashed;
  }

  .container {
    @apply tw:px-4 tw:xl:px-6 tw:mx-auto tw:max-w-screen-2xl;
  }

  /* Hide scrollbar for Chrome, Safari and Opera */
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  /* Hide scrollbar for IE, Edge and Firefox */
  .no-scrollbar {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
}

/*
  Only use this way that the custom class can have the prefix.
  (ie., you can't use `@layer utilities` to have the prefix)
*/
@utility flex-center {
  @apply tw:flex tw:items-center tw:justify-center;
}

body {
  @apply tw:font-mono;
}